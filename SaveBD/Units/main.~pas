unit main;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ComCtrls, StdCtrls, Buttons, ExtCtrls, ToolWin, DB,
  DBTables,IniFiles, ImgList,WorkProc, Mask, Provider, ADODB, Grids,
  DBGrids, DBCtrls,FileCtrl,ShellAPI, Menus, AppEvnts;

 const
    MyTrayIcon = WM_USER + 1;
     NameReg ='ArhivBD';
type
  TFmState =(fRestore,fBackup);

  TFmSaveBD = class(TForm)
    StatusBar1: TStatusBar;
    ToolBar1: TToolBar;
    Panel1: TPanel;
    lbnmBD: TLabel;
    ToolButton2: TToolButton;
    ToolButton3: TToolButton;
    OpenDialog1: TOpenDialog;
    SaveDialog1: TSaveDialog;
    bOK: TButton;
    bCancel: TButton;
    Label2: TLabel;
    edPath: TEdit;
    TimeBackup: TTimer;
    mdDay: TMaskEdit;
    edInterval: TEdit;
    UpDown1: TUpDown;
    Label1: TLabel;
    mdTimeArh: TMaskEdit;
    LbYesterdey: TLabel;
    chbDel: TCheckBox;
    pnClear: TPanel;
    Label3: TLabel;
    cbTabNm: TComboBox;
    Label4: TLabel;
    cbFldNm: TComboBox;
    ToolButton1: TToolButton;
    bClose: TButton;
    ADOC: TADOConnection;
    adQu: TADOQuery;
    cbNmBd: TComboBox;
    pmIcon: TPopupMenu;
    N1: TMenuItem;
    N2: TMenuItem;
    ApplicationEvents1: TApplicationEvents;
    N3: TMenuItem;
    Button1: TButton;


    procedure bOKClick(Sender: TObject);
    procedure bCancelClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure TimeBackupTimer(Sender: TObject);
    procedure cbTabNmChange(Sender: TObject);
    procedure chbDelClick(Sender: TObject);
    procedure cbNmBdChange(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure edIntervalExit(Sender: TObject);
    procedure edIntervalKeyPress(Sender: TObject; var Key: Char);
    procedure N2Click(Sender: TObject);
    procedure cbFldNmChange(Sender: TObject);
    procedure ApplicationEvents1Minimize(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure N3Click(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure bCloseClick(Sender: TObject);


  private
    { Private declarations }
 procedure MTIcon(var a: TMessage);message MyTrayIcon;



  public
    { Public declarations }

      {= Запуск таймера}
    procedure StartTimer(var arh : Trecarhiv; ADQU:TADOQuery);
      {= Заполнение листа TStrings полями типа DateTime}
    procedure FillListOfTimeField(qry :TADOquery;const nmTAb : string;List :TCombobox);
      {= Активация параметров для очистки "основной" таблицы формуляров}
    procedure ChangeEnable(bool : boolean);
      {= Подлючение к MSSQL Server }
    function ConnectionToBDname(const dbnm : string)  : boolean;
      {= Заполнение ArhivRec из сомпонентов формы}
    procedure GetFromComponenet(var Arh :TRecArhiv);
      {= Заполнение компонентов на форме из ArhRec}
    procedure SetTextToComponent(Arh : TRecArhiv);
    function FillTable(ADOC:TadoConnection;bdname :String):string;
    function ChekMainParam : boolean;
  end;

var
    FmSaveBD : TFmSaveBD;
    NID : TNotifyIconData;
 


      {= Список всех баз данных на LOCAL сервере}
  Function FillListDataBase(AdQu :TADOQuery;cbNmBd :TCombobox):string;
      {Создание иконки в SystemTray}
  function TaskBarIcon(dwMessage:Cardinal;Nid:TNotiFyIconData): Boolean;

  Function ParamNotifyIcon(hWindow : THandle; ID  : Cardinal;
   ICON : hicon; CallbackMessage : Cardinal; Tip  : String ):TNotiFyIconData;
      {Чтение в реестре exe}
  function ReadFromRegistry(const nameReg :string): boolean;
      {Запись в реестр exe для автозапуска}
  Procedure WriteToRegistry(const nameReg :string);


implementation

uses Math, DateUtils,registry;




{$R *.dfm}




procedure TFmSaveBD.MTIcon(var a: TMessage);
var P: TPoint;
begin
 case a.lParam of
  WM_LBUTTONDBLCLK:
   begin
      Visible := True
   end;
  WM_RBUTTONDOWN:
    begin
     GetCursorPos(P);
     pmIcon.Popup(P.X, P.Y);
    end;
 end;
end;


Function ParamNotifyIcon(hWindow : THandle; ID  : Cardinal;
   ICON : hicon; CallbackMessage : Cardinal; Tip  : String ):TNotiFyIconData;
begin
 FillChar( NID, SizeOf( TNotifyIconData ), 0 );
  with NID do begin
    cbSize := SizeOf( TNotifyIconData );
    Wnd    := hWindow;
    uID    := ID;
    uFlags := NIF_MESSAGE or NIF_ICON or NIF_TIP;
    uCallbackMessage := CallbackMessage;
    hIcon  := Icon;
    if Length( Tip ) > 63 then SetLength( Tip, 63 );
     StrPCopy( szTip, Tip );
   end;
 Result :=Nid;
end;


{Создание иконки в SystemTray}
function TaskBarIcon(dwMessage:Cardinal;Nid:TNotiFyIconData): Boolean;
begin
 Result := Shell_NotifyIcon( dwMessage, @NID );
end; 


  {= Заполнение листа TStrings полями типа DateTime}
procedure TFmSaveBD.FillListOfTimeField(qry :TAdoquery;const nmTAb : string;List :TCombobox);
var I : integer;
begin
 qry.Close;
 qry.SQL.Clear;
 qry.SQL.Text := 'select top 1 * from ' + nmTAb;
 try
  qry.Open;
 except
  exit;
 end;
 list.Items.Clear;
  for i:=0 to Qry.FieldCount-1 do
   if Qry.fields[i].Visible then
    if Qry.Fields[i].DataType in  [ftDate, ftTime,ftDateTime]  then
      List.Items.AddObject(Qry.Fields[i].FieldName,Qry.Fields[i]);

List.ItemIndex :=0;
end;

  {= Заполнение ArhivRec из сомпонентов формы}
procedure TFmSaveBD.GetFromComponenet(var Arh :TRecArhiv);
begin
 ShortTimeFormat :='hh:nn';
 Arh.NameBD     := cbNmBd.Text;
 Arh.pathBackup := edPath.Text;
 ClearTab     := chbDel.Checked;
 Arh.TabName  := cbTabNm.Text;
 Arh.FldName  := cbFldNm.Text;
 Arh.interArh := StrToInt(edInterval.Text);
 Arh.TimeArh  := StrToTime(mdTimeArh.Text);
 Arh.DayFArh  := StrToDate(mdDay.Text);
 arh.DateArh  := arh.DayFArh + Arh.TimeArh;
end;

{+Заполнение компонентов на форме из ArhRec}
procedure TFmSaveBD.SetTextToComponent(Arh :TRecArhiv);
begin
 ShortTimeFormat :='hh:nn';
 cbNmBd.ItemIndex := cbNmBd.Items.IndexOf(Arh.NameBD);
 edPath.Text      := Arh.pathBackup;
 chbDel.Checked   := ClearTab;
 cbTabNm.Text     := Arh.TabName;
 cbFldNm.Text     := Arh.FldName;
 edInterval.Text  := IntToStr(Arh.interArh);
 mdTimeArh.Text   := FormatDateTime('hh:nn',ARH.TimeArh);
 mdDay.Text       := DateToStr(Arh.DayFArh);
 UpDown1.Position := arh.InterArh;
 LbYesterdey.Caption := DateToStr(Now-1);
end;

function ReadFromRegistry (const nameReg :string)  : boolean;
var reg : TRegistry;
begin
  reg := TRegistry.Create;
  reg.RootKey := HKEY_LOCAL_MACHINE;
  reg.LazyWrite := false;
  reg.OpenKey('Software\Microsoft\Windows\CurrentVersion\Run',false);
   Result:=  reg.ValueExists(nameReg);
  reg.Free;
end;


Procedure WriteToRegistry(const nameReg :string);
var reg : TRegistry;
begin
 reg := TRegistry.Create;
  reg.RootKey := HKEY_LOCAL_MACHINE;
  reg.LazyWrite := false;
  reg.OpenKey('Software\Microsoft\Windows\CurrentVersion\Run',false);
  if not ReadFromRegistry(nameReg)  then
   begin
    reg.WriteString(nameReg, Application.ExeName);
    reg.CloseKey;
   end;
  reg.free;
end;

procedure DeleteFromRegistry(const nameReg :string);
var reg : TRegistry;
begin
 reg := TRegistry.Create;
  reg.RootKey := HKEY_LOCAL_MACHINE;
  reg.LazyWrite := false;
  reg.OpenKey('Software\Microsoft\Windows\CurrentVersion\Run',false);
  if  ReadFromRegistry(nameReg)  then
   begin
       Reg.DeleteValue(nameReg);
 
   end;
  reg.free;
end;


procedure TFmSaveBD.bOKClick(Sender: TObject);
begin
if not ChekMainParam then exit;
 GetFromComponenet(Arh);
 ConnectionToBDname(Arh.NameBD);
 TimeBackup.Interval:=20000;
 TimeBackUp.Enabled :=true;
 SaveParamIniFile(Arh,True);
 FmSaveBD.Visible := false;
 WriteToRegistry(nameReg);
end;

{= Запуск таймера}
procedure TFmSaveBD.StartTimer(var arh : Trecarhiv;ADQU:TADOQuery);
  // 1мин=0.000694 //
begin
  if (DaysBetween(Now,arh.DateArh) mod arh.InterArh )=0 then
   if  SameValue(Frac(arh.TimeArh),Frac(time),OneMinute) then
    begin
     TimeBackUp.Enabled:=False;
     BackUpBD(ADQU,Arh);
     If chbDel.Checked then
         DeleteRecordFromTable(ADQU,arh.FldName,Arh.TabName);
     TimeBackUp.Interval :=20000;
     TimeBackUp.Enabled:=true;
    end;
end;

procedure TFmSaveBD.bCancelClick(Sender: TObject);
begin
   ReadFromIniFile(Arh,True);
   SetTextToComponent(Arh);
   FmSaveBD.Visible := False;
end;


  {= Подключение к MSSQL Server }
function TFmSaveBD.ConnectionToBDname(const dbnm : string)  : boolean ;
begin
  ADOC.Connected:=false;
  Adoc.ConnectionString :=('Provider=SQLOLEDB.1;Integrated Security=SSPI;'+
     'Persist Security Info=False;Initial Catalog= '+dbnm+';Data Source=(local)');
   try
    Adoc.Connected := true;
   except
   end;
 Result := Adoc.Connected;
end;

  {= Список всех баз данных на LOCAL сервере}
function FillListDataBase(AdQu :TADOQuery;cbNmBd :TCombobox): string;
const
 SystemBD : array  [0..5] of string =('master','model','msdb','Northwind','pubs','tempdb');
 var i,j : integer;
     List:TStringList;
begin
  List := TStringList.Create;
  List.Clear;
   adQu.Close;
   adQu.SQL.Clear;
   adQu.SQL.Text := 'select * from sysdatabases';
   adQu.Open;
  while  NOT AdQu.Eof do
   begin
     List.Add(adQu.FieldByName('name').CurValue);
     adQu.Next;
  end;
  for i := 0 TO 5 do
   for j:= List.Count-1  downto 0  do
    if List.Strings[j]=SystemBD[i] then List.Delete(j);
 cbNmBd.Items.AddStrings(List);
 Result:= cbNmBd.Text;
 List.Free;
end;



function TFmSaveBD.FillTable(ADOC:TadoConnection;bdname :String):string;
begin
 If ConnectionToBDname(bdname) then
    ADOC.GetTableNames(cbTabNm.Items,false);
    cbTabNm.ItemIndex:=0;
    Result:= cbTabNm.Text;
end;

procedure SetTextTOCombobox(const Textnm : string;Cb :TCombobox);
begin
if Textnm<>'' then
 if Cb.Items.IndexOf(Textnm)<> -1 then  Cb.ItemIndex:= Cb.Items.IndexOf(Textnm)
   else  Cb.ItemIndex:=0;
end;

procedure TFmSaveBD.FormCreate(Sender: TObject);
begin
fmClose:=false;
 ReadFromIniFile(Arh,FirstStart);
 If ConnectionToBDname('master') then
  begin
    FillListDataBase(adQu,cbNmBd);
     SetTextTOCombobox(Arh.NameBD,cbNmBd);
    FillTable(Adoc,Arh.NameBD);
     SetTextTOCombobox(Arh.TabName,cbTabNm);
    FillListofTimeField(AdQu,cbTabNm.Text, cbFldNm);
     SetTextToCombobox(Arh.FldName,cbFldNm);
   SetTextToComponent(arh);
    //if ChekMainParam  then begin
    ////                                'Параметры архивирования БД'
      Nid :=ParamNotifyIcon(Handle,1,FmSaveBD.Icon.Handle,MyTrayIcon,Caption);
      TaskBarIcon(Nim_ADD,Nid);
      TimeBackup.Enabled :=True;
   // end;

 end;
end;

procedure TFmSaveBD.TimeBackupTimer(Sender: TObject);
begin
   StartTimer(arh,ADQu);
end;

procedure TFmSaveBD.cbTabNmChange(Sender: TObject);
begin
 Arh.TabName := cbTabNm.Text;
   FillListofTimeField(AdQu,cbTabNm.Text, cbFldNm);
    SetTextToCombobox(Arh.FldName,cbFldNm);
     arh.FldName := cbFldNm.Text;
end;

  {= Активация параметров для очистки "основной" таблицы формуляров}
procedure  TFmSaveBD.ChangeEnable(bool : boolean);
var i : integer;
begin
 FmSaveBD.pnClear.Enabled := bool;
   for I :=0 to fmSaveBD.ComponentCount-1 do
    begin
      if (FmSaveBD.Components[i] is TControl) then
       begin
        if (FmSaveBD.Components[i] as TControl).Parent = pnClear then
          (FmSaveBD.Components[i] as TControl).Enabled := bool;
       end;
    end;
end;

procedure TFmSaveBD.chbDelClick(Sender: TObject);
begin
  ClearTab :=chbDel.Checked;
  ChangeEnable(chbDel.Checked);
end;

procedure TFmSaveBD.cbNmBdChange(Sender: TObject);
begin
  Arh.NameBD:= cbNmBd.Text;
  Arh.TabName:= FillTable(Adoc,Arh.NameBD);
  SetTextTOCombobox(Arh.TabName,cbTabNm);
  cbTabNm.OnChange(Sender);
end;

procedure TFmSaveBD.FormShow(Sender: TObject);
begin
 FmSaveBD.Visible:=True;
end;

procedure TFmSaveBD.edIntervalExit(Sender: TObject);
begin
 If (StrToInt(edInterval.Text)>UpDown1.Max) or
          (StrToInt(edInterval.Text)<UpDown1.Min) then
  begin
   ShowMessage('Не соответствует формату!');
   edInterval.SetFocus;
 end;

end;

function TFmSaveBD.ChekMainParam : boolean;
begin
Result :=True;
  if cbNmBD.Text = '' then
  begin
   Visible := True;
   cbNmBd.SetFocus;
   ShowMessage('Выберите базу данных!');
   Result := False;
  end;
  if edPath.Text = '' then
  begin
   Visible := True;
   ShowMessage('Выберите папку для хранения архивов!');
   Result :=False;
  end;
 if chbDel.Checked then begin
   if cbTabNm.Text='' then
    begin
     Visible := True;
     cbTabNm.SetFocus;
     ShowMessage('Выберите таблицу формуляров!');
     Result :=False;
    end;
   if cbFldNm.Text='' then
    begin
     Visible := True;
     cbFldNm.SetFocus;
     ShowMessage('Выберите поле даты!');
     Result :=False;
    end;
 end;
end;

procedure TFmSaveBD.edIntervalKeyPress(Sender: TObject; var Key: Char);
begin
 if not  (Key in ['0'..'9',  #8, #13]) then // разрешенные клавиши
 begin
  Key := #0;
  MessageBeep (MB_OK);
 end;
end;


procedure TFmSaveBD.N2Click(Sender: TObject);
begin

 if Application.MessageBox('Выйти из программы?','Подтверждение',MB_YesNo + MB_ICONQUESTION)=idYes then
  begin
   fmClose :=True;
    Close;
  end  
 else hide;
end;

procedure TFmSaveBD.cbFldNmChange(Sender: TObject);
begin
 arh.FldName := cbFldNm.Text;
end;

procedure TFmSaveBD.ApplicationEvents1Minimize(Sender: TObject);
begin
 Visible:=False;
end;

procedure TFmSaveBD.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  Nid :=ParamNotifyIcon(Handle,1,FmSaveBD.Icon.Handle,MyTrayIcon,Caption);
  TaskBarIcon(Nim_Delete,Nid);

end;

procedure TFmSaveBD.N3Click(Sender: TObject);
begin
 Hide;
end;

procedure TFmSaveBD.Button1Click(Sender: TObject);
begin
  if SelectDirectory(Arh.pathBackup, [sdAllowCreate, sdPerformCreate, sdPrompt],1000)then
    if StrPos(PChar(Arh.pathBackup), PChar(Arh.pathBackup+'\')) = nil then
      Arh.pathBackup:= Arh.pathBackup+'\';
  edPath.Text := Arh.pathBackup;
end;

procedure TFmSaveBD.FormCloseQuery(Sender: TObject; var CanClose: Boolean);
begin
CanClose := FmClose;
if not CanClose then Visible:=False;
end;

procedure TFmSaveBD.bCloseClick(Sender: TObject);
begin
 fmClose:=True;
 FmSaveBD.Close;
end;

end.



